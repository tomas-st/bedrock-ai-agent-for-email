version: '3'

dotenv: ['.env']

tasks:
  build:
    desc: "Build the Docker image for AWS Lambda"
    cmds:
      - docker build -t $ECR_REPO_NAME .

  push:
    desc: "Push the image to AWS ECR"
    cmds:
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - docker tag $ECR_REPO_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest

  create-ecr:
    desc: "Create an ECR repository if it does not exist"
    cmds:
      - aws ecr describe-repositories --repository-names $ECR_REPO_NAME || aws ecr create-repository --repository-name $ECR_REPO_NAME

  deploy-lambda:
    desc: "Deploy the function to AWS Lambda"
    cmds:
      - aws lambda create-function --function-name $LAMBDA_FUNCTION_NAME \
          --package-type Image \
          --code ImageUri=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest \
          --role $LAMBDA_EXECUTION_ROLE \
          --timeout 30 \
          --memory-size 512 || true

  update-lambda:
    desc: "Update the Lambda function with the latest image"
    cmds:
      - aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME \
          --image-uri $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:latest

  invoke:
    desc: "Invoke the Lambda function for testing"
    cmds:
      - aws lambda invoke --function-name $LAMBDA_FUNCTION_NAME output.json && cat output.json

  docker-compose-up:
    desc: "Start Docker Compose for the project"
    cmds:
      - docker compose up --build -d

  all:
    desc: "Run all tasks in sequence (build, push, deploy/update)"
    cmds:
      - task: create-ecr
      - task: build
      - task: push
      - task: deploy-lambda
